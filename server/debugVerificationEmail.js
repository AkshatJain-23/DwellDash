// Comprehensive debug script for verification email issues
console.log('üîß DwellDash Verification Email Debug');
console.log('====================================\n');

async function debugVerificationEmail() {
  try {
    // Test 1: Check email service import
    console.log('1Ô∏è‚É£ Testing Email Service Import...');
    const emailService = require('./services/emailService');
    console.log(`   ‚úÖ Email service imported successfully`);
    console.log(`   üìß sendVerificationEmail: ${typeof emailService.sendVerificationEmail}`);
    
    // Test 2: Test email sending functionality
    console.log('\n2Ô∏è‚É£ Testing Email Functionality...');
    try {
      const result = await emailService.sendVerificationEmail(
        'test@example.com',
        'Test User',
        'test-token-12345'
      );
      console.log('   ‚úÖ Email service working!');
      console.log(`   üìß Message ID: ${result.messageId}`);
      if (result.previewUrl) {
        console.log(`   üîó Preview URL: ${result.previewUrl}`);
      }
    } catch (emailError) {
      console.log('   ‚ùå Email service error:', emailError.message);
    }

    // Test 3: Check auth route import
    console.log('\n3Ô∏è‚É£ Testing Auth Route Configuration...');
    const crypto = require('crypto');
    console.log(`   ‚úÖ Crypto module: ${typeof crypto.randomBytes}`);
    
    // Test 4: Check MongoDB connection
    console.log('\n4Ô∏è‚É£ Testing Database Connection...');
    const mongoose = require('mongoose');
    
    try {
      await mongoose.connect('mongodb+srv://deepak06:AkshatJain2003@cluster0.9prhv.mongodb.net/dwelldash?retryWrites=true&w=majority&appName=Cluster0');
      console.log('   ‚úÖ MongoDB connected successfully');
      
      const User = require('./models/User');
      const userCount = await User.countDocuments();
      console.log(`   üìä Users in database: ${userCount}`);
      
      // Find a test user
      const testUser = await User.findOne({}).select('email verified');
      if (testUser) {
        console.log(`   üë§ Sample user: ${testUser.email} (verified: ${testUser.verified})`);
      }
      
    } catch (dbError) {
      console.log('   ‚ùå Database connection error:', dbError.message);
    }

    console.log('\n‚úÖ Debug tests completed!');

  } catch (error) {
    console.error('‚ùå Debug failed:', error.message);
  } finally {
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
    }
  }
}

// Troubleshooting guide
function printTroubleshootingSteps() {
  console.log('\nüîß VERIFICATION EMAIL TROUBLESHOOTING GUIDE');
  console.log('===========================================\n');
  
  console.log('üìã COMMON ISSUES AND SOLUTIONS:\n');
  
  console.log('1Ô∏è‚É£ "Failed to send verification email" Error:');
  console.log('   üîç Possible causes:');
  console.log('   ‚Ä¢ Email service configuration issues');
  console.log('   ‚Ä¢ Missing environment variables');
  console.log('   ‚Ä¢ Network connectivity problems');
  console.log('   ‚Ä¢ Invalid JWT token');
  console.log('   ‚Ä¢ User already verified');
  console.log('');
  
  console.log('2Ô∏è‚É£ Authentication Issues:');
  console.log('   üîç Check these:');
  console.log('   ‚Ä¢ User is logged in with valid JWT token');
  console.log('   ‚Ä¢ Authorization header format: "Bearer <token>"');
  console.log('   ‚Ä¢ Token is not expired');
  console.log('   ‚Ä¢ User exists in database');
  console.log('');
  
  console.log('3Ô∏è‚É£ Email Service Issues:');
  console.log('   üîç Environment variables needed:');
  console.log('   ‚Ä¢ EMAIL_SERVICE (optional, defaults to Ethereal)');
  console.log('   ‚Ä¢ EMAIL_USER (for Gmail SMTP)');
  console.log('   ‚Ä¢ EMAIL_PASS (for Gmail App Password)');
  console.log('   ‚Ä¢ EMAIL_FROM (sender email address)');
  console.log('');
  
  console.log('4Ô∏è‚É£ Frontend Integration:');
  console.log('   üîç Frontend should send:');
  console.log('   ‚Ä¢ POST request to /auth/send-verification');
  console.log('   ‚Ä¢ Authorization header with Bearer token');
  console.log('   ‚Ä¢ Content-Type: application/json');
  console.log('');
  
  console.log('‚úÖ TESTING STEPS:');
  console.log('   1. Check server console for detailed error logs');
  console.log('   2. Verify user is logged in and has valid token');
  console.log('   3. Ensure user account is not already verified');
  console.log('   4. Test email service independently');
  console.log('   5. Check network connectivity');
  console.log('');
  
  console.log('üõ†Ô∏è  QUICK FIXES:');
  console.log('   ‚Ä¢ Use Ethereal Email for testing (no config needed)');
  console.log('   ‚Ä¢ Check browser developer tools for API errors');
  console.log('   ‚Ä¢ Verify JWT token in localStorage/sessionStorage');
  console.log('   ‚Ä¢ Test with manual verification endpoint for development');
  console.log('');
  
  console.log('üîó MANUAL VERIFICATION FOR TESTING:');
  console.log('   PATCH /auth/verify-user/:userId');
  console.log('   (Requires authentication, manually verifies user)');
}

// Run debug and show troubleshooting
async function runFullDebug() {
  await debugVerificationEmail();
  printTroubleshootingSteps();
  
  console.log('\nüéØ NEXT STEPS:');
  console.log('   1. Check the server console when testing verification email');
  console.log('   2. Look for detailed error logs with the enhanced logging');
  console.log('   3. Ensure proper authentication from frontend');
  console.log('   4. Test email service configuration');
  console.log('\n‚ú® System should now provide detailed error information!');
}

runFullDebug(); 